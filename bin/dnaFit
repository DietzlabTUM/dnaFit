#! /usr/bin/env python
# -*- coding: utf-8 -*-

from pathlib import Path
from typing import List
import argparse
import subprocess
import os
import sys
from shutil import copyfile, copytree

from dnaFit.version import get_version
from dnaFit.fit.mrC_mdff import Cascade
from dnaFit.core.utils import _get_executable
""" cascaded mrDNA-driven MD flexible fitting:
    optional:
        creates a folder "mrDNA" containing all files sfor a standart mrDNA run
        creates a folder "dnaFit" and copies final atomic model from mrDNA
            the pdb is importet as *-undocked.pdb as docking still has to be
            performed externally.
    moves to existing! folder "dnaFit" and performs cascaded fitting on the
    data present there.
"""
# TODO: maybe create seperate script for non-mrDNA fitting


def parse_args():
    parser = argparse.ArgumentParser(
        prog="dnaFit",
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('--version', action='version',
                        version='%(prog)s {}'.format(get_version()),
                        help='Print the version of dnaFit')

    parser.add_argument('-o', '--output-prefix', type=str, default=None,
                        help="short design name, default to json name")
    parser.add_argument('-g', '--gpu', type=int, default=0,
                        help='GPU used for simulation')

    parser.add_argument('--skip-mrDNA', action='store_true',
                        help='skip mrDNA simulation and fit prexisting data')

    parser.add_argument('-s', '--sequence', type=str, default=None,
                        help='scaffold strand sequence file [.txt, .seq]')
    parser.add_argument('input_cad', type=str,
                        help="Cadnano JSON file [.json]")
    parser.add_argument('input_mrc', type=str,
                        help="cryo EM columetric data file [.mrc]")
    return parser.parse_args()


def run_mrDNA(cad_file: Path, seq_file: Path, prefix: str, directory: str = "mrDNA", gpu: int = 0):
    home_directory = os.getcwd()
    try:
        Path(directory).mkdir(parents=True, exist_ok=True)
        os.chdir(directory)
        mrDNA = _get_executable("mrdna")

        input_mrDNA = (
            f"-o {prefix} -d {directory} -g {gpu} --run-enrg-md\
            --sequence-file {seq_file} {cad_file}"
        )
        cmd = (str(mrDNA), input_mrDNA)

        # TODO: logger: f"Starting mrDNA with {cmd}"
        process = subprocess.Popen(
            cmd, stdout=subprocess.PIPE, universal_newlines=True)
        for line in process.stdout:
            sys.stdout.write(line)
            sys.stdout.flush()

        # NOTE: check successful finish
        is_ok = (os.path.isfile(f"./{prefix}-3.psf")
                 and os.path.isfile(f"./{prefix}-3.pdb")
                 and os.path.isfile(f"./{prefix}-3.exb"))
        if not is_ok:
            raise Exception("ERROR: mrDNA incomplete")
        # TODO -low-: check for pdb vaildity
    finally:
        os.chdir(home_directory)


def prep_cascaded_fitting(prefix: str, cad_file: Path, seq_file: Path):
    home_directory = os.getcwd()
    try:
        Path("dnaFit").mkdir(parents=True, exist_ok=True)
        os.chdir("dnaFit")

        copyfile(cad_file, f"./{prefix}.json")
        copyfile(seq_file, f"./{prefix}.seq")

        copyfile(f"../mrDNA/{prefix}-3.psf", f"./{prefix}.psf")
        copyfile(f"../mrDNA/{prefix}-3.exb", f"./{prefix}.exb")
        copyfile(f"../mrDNA/{prefix}-3.pdb", f"./{prefix}-undocked.pdb")
        copytree("../mrDNA/charmm36.nbfix", "./charmm36.nbfix")
    except:
        raise Exception(
            "Failed to copy mrDNA files. Something must have gone wrong")
    finally:
        os.chdir(home_directory)


def check_file(in_file: Path, extensions: List[str]):
    try:
        suffix = in_file.suffix
    except:
        raise Exception(f"ERROR: Unrecognized input file {in_file}")
    if suffix not in extensions:
        raise Exception(f"ERROR: expected {extensions} for input {in_file}")


def main():
    args = parse_args()
    # TODO: provide fitting presets: bad docking, etc..

    cad_file = Path(args.input_cad).resolve()
    check_file(cad_file, [".json"])
    seq_file = Path(args.sequence).resolve()
    check_file(seq_file, [".txt", ".seq"])
    prefix = cad_file.stem if args.output_prefix is None else args.output_prefix

    if not args.skip_mrDNA:
        run_mrDNA(cad_file, seq_file, prefix, directory="mrDNA", gpu=args.gpu)
        prep_cascaded_fitting(prefix, cad_file, seq_file)

    # TODO: parse & set fitting parameters
    mrc_file = Path(args.input_mrc).resolve()
    check_file(mrc_file, [".mrc"])
    copyfile(mrc_file, f"./dnaFit/{prefix}.mrc")

    time_steps = 12000
    resolution = 10.0

    # NOTE changing design and sequence file to copy in folder dnaFit to ensure consistency
    mrc_file = Path(f"./dnaFit/{prefix}.mrc").resolve()
    cad_file = Path(f"./dnaFit/{prefix}.json").resolve()
    seq_file = Path(f"./dnaFit/{prefix}.seq").resolve()
    top = Path(f"./dnaFit/{prefix}.psf").resolve()
    conf = Path(f"./dnaFit/{prefix}-undocked.pdb").resolve()
    exb = Path(f"./dnaFit/{prefix}.exb").resolve()

    home_directory = os.getcwd()
    try:
        os.chdir("dnaFit")
        # NOTE: creating Cascade object triggers external docking prompt
        cascade = Cascade(conf=conf, top=top, mrc=mrc_file,
                          exb=exb, recenter=True, is_docked=False)
        # NOTE: fit is moved back to original mrc position, recentering invisible to user
        dnaFit = cascade.run_cascaded_fitting(
            base_time_steps=time_steps, resolution=resolution)
        dnaFit.write_linkage(cad_file, seq_file)
        dnaFit.write_output(dest=home_directory,
                            write_mmCif=True, crop_mrc=True)

    finally:
        os.chdir(home_directory)


if __name__ == '__main__':
    main()
