#! /usr/bin/env python
# -*- coding: utf-8 -*-

from pathlib import Path
from typing import List
import argparse
import subprocess
import os
import sys

from dnaFit.version import get_version
from dnaFit.fit.mrC_mdff import mrCascade
from dnaFit.code.utils import _get_executable


""" cascaded mrDNA-driven MD flexible fitting:
    optional:
        creates a folder "mrDNA" containing all files sfor a standart mrDNA run
        creates a folder "dnaFit" and copies final atomic model from mrDNA
            the pdb is importet as *-undocked.pdb as docking still has to be
            performed externally.
    moves to existing! folder "dnaFit" and performs cascaded fitting on the
    data present there.
"""
# TODO: maybe create seperate script for non-mrDNA fitting


def parse_args():
    parser = argparse.ArgumentParser(
        prog="dnaFit",
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('--version', action='version',
                        version='%(prog)s {}'.format(get_version()),
                        help='Print the version of dnaFit')

    parser.add_argument('-o', '--output-prefix', type=str, default=None,
                        help="short design name, default to json name")
    parser.add_argument('-g', '--gpu', type=int, default=0,
                        help='GPU used for simulation')

    parser.add_argument('--skip-mrDNA', action='store_true',
                        help='skip mrDNA simulation and fit prexisting data')

    parser.add_argument('-s', '--sequence', type=str, default=None,
                        help='scaffold strand sequence file [.txt, .seq]')
    parser.add_argument('input_cad', type=str,
                        help="Cadnano JSON file [.json]")
    parser.add_argument('input_mrc', type=str,
                        help="cryo EM columetric data file [.mrc]")
    return parser.parse_args()


def run_mrDNA(cad_file: Path, seq_file: Path, prefix: str, directory: str = "mrDNA", gpu: int = 0):
    home_directory = os.getcwd()
    try:
        Path(directory).mkdir(parents=True, exist_ok=True)
        os.chdir(directory)
        mrDNA = _get_executable("mrdna")

        input_mrDNA = (
            "-o {prefix} -d {directory} -g {gpu} --run-enrg-md\
            --sequence-file {seq_file} {cad_file}".format(**locals())
        )
        cmd = (str(mrDNA), input_mrDNA)

        # TODO: logger: "Starting mrDNA with {}".format(cmd)
        process = subprocess.Popen(
            cmd, stdout=subprocess.PIPE, universal_newlines=True)
        for line in process.stdout:
            sys.stdout.write(line)
            sys.stdout.flush()

        # TODO: check successful finish
        mrdna_file_stem = None
        if mrdna_file_stem is None:
            raise Exception("mrDNA incomplete")
    finally:
        os.chdir(home_directory)


def prep_cascaded_fitting(prefix: str, cad_file: Path, seq_file: Path):
    home_directory = os.getcwd()
    try:
        Path("dnaFit").mkdir(parents=True, exist_ok=True)
        os.chdir("dnaFit")
        # TODO: rearrange mrDNA output files
        #   * move: psf
        #   * move and rename to undocked: pdb
        #   * move seq
        #   * move but dont split exb (done later)
        #   * copy forcefield folder

    finally:
        os.chdir(home_directory)


def check_docked_pdb():
    is_docked = True
    return is_docked


def check_file(in_file: Path, extensions: List[str]):
    try:
        suffix = in_file.suffix
    except:
        raise Exception("Unrecognized input file {}'".format(in_file))
    if suffix not in extensions:
        raise Exception(
            "Expected {} for input file {}'".format(extensions, in_file))


def main():
    args = parse_args()
    # TODO: provide fitting presets: bad docking, etc..

    cad_file = Path(args.input_cad)
    check_file(cad_file, [".json"])
    seq_file = Path(args.sequence)
    check_file(seq_file, [".txt", ".seq"])
    prefix = cad_file.stem if args.output_prefix is None else args.output_prefix

    if not args.skip_mrDNA:
        run_mrDNA(cad_file, seq_file, prefix, directory="mrDNA", gpu=args.gpu)
        # NOTE: move cad and seq here to ensure consistency with atomic model
        prep_cascaded_fitting(prefix, cad_file, seq_file)
        #       GOAL: provide start .psf, undocked.pdb, .exb, .json, .seq in folder "dnaFit"

    # NOTE: skip here for rerun ("reuse mrdna or start from different fit")
    #   assuming dnaFit folder with (.psd. .pdb.seq .json)

    # TODO: parse & set fitting parameters
    mrc_file = Path(args.input_mrc)
    check_file(mrc_file, [".mrc"])
    time_step = 12000
    resolution = 10.0

    home_directory = os.getcwd()
    try:
        os.chdir("dnaFit")
        # TODO: read and check files in "dnaFit"

        # NOTE:
        cascade = mrCascade(...)

        # NOTE: ultimatley returns a dnaFit object, that can be linked and analysed
        #   this fit is moved back to original mrc position
        dnaFit = cascade.run_cascaded_fitting(
            time_step=time_step, resolution=resolution)

        # TODO: add persistent and human readable linkage (Fbp, FidDid)
        dnaFit.create_linkage()
        # TODO: save final pdb/mmcif together with mrc and masked mrc

    finally:
        os.chdir(home_directory)


if __name__ == '__main__':
    main()
