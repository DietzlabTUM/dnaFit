#! /usr/bin/env python
# -*- coding: utf-8 -*-

from mrdna.readers import read_cadnano as read_model
from mrdna.model.dna_sequence import read_sequence_file
from pathlib import Path
import argparse
import subprocess
import os
import sys

from dnaFit.version import get_version
from dnaFit.fit.mrC_mdff import mrCascade
from dnaFit.code.utils import _get_executable


""" cascaded mrDNA-driven MD flexible fitting
"""


def parse_args():
    parser = argparse.ArgumentParser(
        prog="dnaFit",
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument('--version', action='version',
                        version='%(prog)s {}'.format(get_version()),
                        help='Print the version of dnaFit')
    parser.add_argument('-s', '--sequence', type=str, default=None,
                        help='scaffold strand sequence')
    parser.add_argument('-o', '--output-prefix', type=str, default=None,
                        help="short design name")
    parser.add_argument('-g', '--gpu', type=int, default=0,
                        help='GPU used for simulation')
    parser.add_argument('input_cad', type=str,
                        help="Cadnano JSON file")
    return parser.parse_args()


def run_mrDNA(cad_file, seq_file, directory: str = "mrDNA", gpu: int = 0):
    home_directory = os.getcwd()
    try:
        Path(directory).mkdir(parents=True, exist_ok=True)
        os.chdir(directory)
        mrDNA = _get_executable("mrdna")

        input_mrDNA = (
            "-o {directory} -d {directory} -g {gpu} --run-enrg-md\
            --sequence-file {seq_file} {cad_file}".format(**locals())
        )
        cmd = (str(mrDNA), input_mrDNA)

        # TODO: logger: "Starting mrDNA with {}".format(cmd)
        process = subprocess.Popen(
            cmd, stdout=subprocess.PIPE, universal_newlines=True)
        for line in process.stdout:
            sys.stdout.write(line)
            sys.stdout.flush()

        # TODO: check successful finish
        mrdna_file_stem = None
        if mrdna_file_stem is None:
            raise Exception("mrDNA incomplete")
    finally:
        os.chdir(home_directory)


def prep_cascaded_fitting():
    home_directory = os.getcwd()
    try:
        Path("dnaFit").mkdir(parents=True, exist_ok=True)
        os.chdir("dnaFit")

        # TODO: either rearrange prep files or create class
        ...

        # TODO: rearrange mrDNA output files

    finally:
        os.chdir(home_directory)


def check_docked_pdb():
    is_docked = True
    return is_docked


def main():
    args = parse_args()
    # TODO: provide fitting presets: bad docking, continuation, etc..

    cad_file = Path(args.input_cad)
    try:
        extension = cad_file.suffix
    except:
        raise Exception("Unrecognized input file '{}'".format(cad_file))
    if extension == '.json':
        raise Exception("Unrecognized input file '{}'".format(cad_file))
    # NOTE: assuming mrc and sequence file have same name as cadnano file
    # TODO: argparse mrc and sequence file. cad_file.stem if None

    do_mrDNA = True  # TODO: input argument
    if not do_mrDNA:
        # NOTE: assuming modified mrDNA, (annotated .exb files)
        run_mrDNA(cad_file, args.sequence, directory="mrDNA", gpu=args.gpu)
        # TODO: check for mrDNA modification and adapt in case of regular mrDNA
        #       TODO: either call mrnda or copy mrdna main code (get model object)
        prep_cascaded_fitting()
        #       GOAL: provide start .psf, undocked.pdb, .exb, -SR.exb, -HO.exb (in folder)

    # NOTE: skip here for rerun ("reuse mrdna or start from different fit")
    #       NOTE: assuming dnaFit folder with (.psd. .pdb .mrc .seq .json)
    #       NOTE: ??? persistent (Fbp, FidDid) linkage (required for .exb)

    ######################################
    # NOTE: BREAK: reorient helix and fit still external
    while True:
        input("You need to manualy align mrc and pdb using VMD. save file as docked and press ENTER")
        if check_docked_pdb():
            break
    ######################################
    # TODO: set fitting parameters
    # TODO: pass input files
    cascade = mrCascade(...)

    # TODO: parse fitting parameter
    time_step = 12000
    resolution = 10.0
    cascade.run_cascaded_fitting(time_step=time_step, resolution=resolution)

    # NOTE: persistent and human readable linkage (Fbp, FidDid)
    cascade.create_linkage()

    # NOTE: ->
    # GOAL: finished fit in folder dnaFit


if __name__ == '__main__':
    main()
